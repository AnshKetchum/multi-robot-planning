/**
 * Blink the default LED on the
 * <a href="https://www.pololu.com/docs/0J86">Pololu 3pi+ 2040 robot</a>.
 * @author Abhi Gundrala
 * @author Edward A. Lee
 */

 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    keepalive: true,
    threading: false
  }
  import Display from "lib/Display.lf"
  preamble {=
    #include <stdio.h>
    #include <pico/stdlib.h>
    #include <hardware/gpio.h>
  =}

/*reactor displayControl {
    d = new Display()
    input button_pressed: bool
     
  reaction(button_pressed) -> d.line0 {=
    /// TODO: define max string size for line
    /// based on font you can have 4 or 8 lines
    static char buf0[17];
    if (button_pressed) {
        snprintf(buf0, 17, "pressed");
        lf_set(d.line0, buf0);
    }
    else{
        snprintf(buf0, 17, "not pressed");
        lf_set(d.line0, buf0);
    }
    =}
}
    */


  main reactor {
    preamble {=
      static void* action;
      interval_t lastTime;
      void callback(uint gpio, uint32_t event_mask) {
        interval_t elapsed_time = lf_time_physical();
        
        if ((elapsed_time-lastTime)/1000000 > 200) {
          lf_schedule(action, 0);
        }
      }
    =}
    timer t(0, 250 ms)
    state button_pressed: bool = false
    d = new Display()
    //dc = new displayControl()
    //led_on -> dc.button_pressed
    
    physical action a
    reaction(startup) -> a {=
      gpio_set_irq_enabled_with_callback(PICO_DEFAULT_LED_PIN, GPIO_IRQ_EDGE_FALL, true, callback);
      action = a;
      lastTime = lf_time_logical_elapsed();
    =}
  
    reaction(a) -> d.line0 {=
      static char buf0[17];

      // uint32_t mask = 1ul << PICO_DEFAULT_LED_PIN;
      // if ((sio_hw->gpio_in & mask)) {
      //   snprintf(buf0, 17, "not pressed");
      // }
      // else {
      // }
      interval_t elapsed_time = lf_time_logical_elapsed();
        snprintf(buf0, 17, "%lld", (elapsed_time-lastTime)/1000000);
        lf_set(d.line0, buf0);
        lastTime = elapsed_time;
      

    //   if(self->led_on) {
    //     *(&sio_hw->gpio_set) ^= mask;
    //   }
    //   else {
    //     *(&sio_hw->gpio_clr) ^= mask;
    //   }
    =}
  }