/**
 * Template for robot driving lab exercises. This template just periodically switches between a
 * STOPPED and a DRIVING mode, updating the LCD display on each change of mode.
 */
 target C {
    platform: {
      name: "rp2040",
      board: "pololu_3pi_2040_robot"
    },
    single-threaded: true
  }
  
  import Display from "lib/Display.lf"
  import Motors from "lib/Motors.lf"
  
  //import IR from "lib/IR.lf" (NEED TO MAKE DRIVER TO ABSTRACT AWAY THE 7 INDIVIDUAL IR SENSORS INTO ONE)
  
  preamble {=
    #include <stdio.h>
    #include "pico/stdlib.h"
    #include "hardware/pwm.h"
    #include "hardware/adc.h"
    #define SERVO_1 6
    #define SERVO_2 7
    #define IR_1 18
    #define IR_2 27
    #define IR_3 28
    #define IR_4 29
    #define IR_5 22
    #define IR_6 23
    #define IR_7 26
  =}
  
  reactor IRSensorReader {
    output IR_1_out: int
    output IR_2_out: int
    output IR_3_out: uint16_t
    output IR_4_out: uint16_t
    output IR_5_out: uint16_t
    output IR_6_out: int
    output IR_7_out: int
    timer sampleIRs(0, 1msec)   //on-board ADCs sample at 500kHz, but we will sample slower to avoid jerky movements
    reaction(sampleIRs) -> IR_1_out, IR_2_out, IR_3_out, IR_4_out, IR_5_out, IR_6_out, IR_7_out {=
      adc_select_input(1);
      uint16_t ir_3_adc = adc_read();
      adc_select_input(2);
      uint16_t ir_4_adc = adc_read()
      adc_select_input(3);
      uint16_t ir_5_adc = adc_read()
      lf_set(IR_2_out, ir_3_adc);
      lf_set(IR_3_out, ir_4_adc);
      lf_set(IR_4_out, ir_5_adc);
      int ir_1_dig = gpio_get(IR_1);
      lf_set(IR_1_out, ir_1_dig);
      int ir_2_dig = gpio_get(IR_2);
      lf_set(IR_2_out, ir_2_dig);
      int ir_6_dig = gpio_get(IR_6);
      lf_set(IR_6_out, ir_6_dig);
      int ir_1_dig = gpio_get(IR_7);
      lf_set(IR_7_out, ir_7_dig);
    =}
  }

  reactor RobotWithAvoidance {
    input drive: bool      // Toggle mode.
    input IR_1_val: int    // for intersection detection, so take digital output of IR sensors
    input IR_2_val: int    // for intersection detection
    input IR_3_val: uint16_t    //for line following (PID), so take analog output of IR sensors
    input IR_4_val: uint16_t    //for line following (PID)
    input IR_5_val: uint16_t    // for line following (PID)
    input IR_6_val: int    // for intersection detection
    input IR_7_val: int    // for intersection detection
    input grabObject: bool  //sent to robot by supervising PC
    output objectGrabbed: bool  //sent to supervising PC to decrement state variables and send back a new path
    input avoidGoAround: bool  //sent to one robot by supervising PC
    input avoidReduceSpeed: bool  //sent to one robot by supervising PC
    logical action returnToLine;  //set true by IR sensor measurements to indicate return to line following after avoidance routine
    output notify: string  // Notify of mode change.
    motors = new Motors()
    // IR = new IR()
    reaction(startup) -> notify, returnToLine {=
      lf_set(notify, "INIT");
      returnToLine.value = false;

      //set up PWM for both servos
      gpio_set_function(SERVO_1);
      gpio_set_function(SERVO_2);
      uint slice_num = pwm_gpio_to_slice_num(SERVO_1);
      pwm_set_wrap(slice_num, 1000);
      pwm_set_clockdiv(slice_num, 2500);  //20ms (20000us) period on 125MHz clock speed

      gpio_init(IR_1);
      gpio_set_dir(IR_1, GPIO_IN);
      gpio_init(IR_2);
      gpio_set_dir(IR_2, GPIO_IN);
      adc_gpio_init(IR_3);
      adc_gpio_init(IR_4);
      adc_gpio_init(IR_5);
      gpio_init(IR_6);
      gpio_set_dir(IR_6, GPIO_IN);
      gpio_init(IR_7);
      gpio_set_dir(IR_7, GPIO_IN);

    =}
    initial mode STOPPED {
      reaction(drive) -> reset(DRIVING), notify, motors.left_power, motors.right_power {=
        if (drive->value) {
          lf_set_mode(DRIVING);
          lf_set(notify, "DRIVING");
          lf_set(motors.left_power, 0.1f);
          lf_set(motors.right_power, 0.1f);
        }
      =}
    }
    //add PID line following here
    mode DRIVING {
      reaction(drive) -> reset(STOPPED), notify, motors.left_power, motors.right_power {=
        if (!drive->value) {
          lf_set_mode(STOPPED);
          lf_set(notify, "STOPPED");
          lf_set(motors.left_power, 0);
          lf_set(motors.right_power, 0);
        }
      =}
      reaction(avoidGoAround) -> reset(AVOID_GO_AROUND), notify, motors.left_power, motors.right_power {=
        if (avoidGoAround->value) {
          lf_set_mode(AVOID_GO_AROUND);
          lf_set(notify, "AVOID_GO_AROUND")
          lf_set(motors.left_power, 0.1f);
          lf_set(motors.right_power, -0.15f);
        }
      =}

      //avoidReduceSpeed becomes true when the CV detects that the contours of both robots are below a determined threshold
      reaction(avoidReduceSpeed) -> reset(AVOID_REDUCE_SPEED), notify, motors.left_power, motors.right_power {=
        if (avoidReduceSpeed->value) {
          lf_set_mode(AVOID_REDUCE_SPEED);
          lf_set(notify, "AVOID_REDUCE_SPEED")
          lf_set(motors.left_power, 0.05f);
          lf_set(motors.right_power, 0.05f);
        }
      =}

      //implement PID control based on calibrations
      reaction(IR_3_val, IR_4_val, IR_5_val) -> motors.left_power, motors.right_power {=
        
      =}

      reaction(grabObject) -> notify, motors.left_power, motors.right_power {=
        if (grabObject->value)  {
          pwm_set_chan_level(slice_num, PWM_CHAN_A, 500);   //actuate left servo to 90degrees (50% duty cycle)
          pwm_set_chan_level(slice_num, PWM_CHAN_B, 500);   //actuate right servo to 90degrees (50% duty cycle)
          pwm_set_enabled(slice_num, true);
          sleep(2sec);
          lf_set(grabObject, false);
          lf_set(objectGrabbed, true);
        }
      =}
    }

    mode INTERSECTION {
      
    }

    //this mode must disable line-following (implement in a separate reactor than LineFollowing)
    mode AVOID_GO_AROUND {
      timer right_turn(250msec);
      timer straight1(0);
      timer left_turn(0);
      timer straight2(0);
      timer left_turn2(0);

      reaction(reset) {=
        lf_schedule(right_turn);
      =}
      reaction(right_turn) -> motors.left_power, motors.right_power {=
        lf_set(motors.left_power, 0.1f);
        lf_set(motors.right_power, 0.1f);
        lf_schedule(straight1, 250msec);
      =}
      reaction(straight1) -> motors.left_power, motors.right_power {=
        lf_set(motors.left_power, -0.1f);
        lf_set(motors.right_power, 0.1f);
        lf_schedule(left_turn, 250msec);
      =}
      reaction(left_turn) -> motors.left_power, motors.right_power {=
        lf_set(motors.left_power, 0.1f);
        lf_set(motors.right_power, 0.1f);
        lf_schedule(straight2, 1sec);
      =}
      reaction(straight2) -> motors.left_power, motors.right_power {=
        lf_set(motors.left_power, -0.1f);
        lf_set(motors.right_power, 0.1f);
        lf_schedule(left_turn2, 250msec);
      =}
      reaction(left_turn2) -> motors.left_power, motors.right_power {=
        lf_set(motors.left_power, 0.1f);
        lf_set(motors.right_power, 0.1f);
      =}

      //once the photodiodes detect that the robot reaches a line after the avoidance routine, orient it to travel parallel to the path once again in the direction of the closest cargo, and return it to line following mode
      reaction(IR_2_val, IR_3_val, IR_4_val) -> returnToLine {=
         //if middle three IR sensors sense a line
         if(IR_2_val->value <= 50 && IR_3_val->value <= 50 && IR_4_val->value <= 50) {
           lf_schedule(returnToLine, 0);
         }
       =}
       reaction(returnToLine) -> reset(DRIVING), notify, motors.left_power, motors.right_power {=
         //read CV command to turn left or right to return path to cargo

      =}

    }

    //this mode must be in the same reactor as LineFollowing
    mode AVOID_REDUCE_SPEED {
      //avoidReduceSpeed becomes false when the CV detects that the contours of both robots are above a determined threshold
      reaction(avoidReduceSpeed) -> reset(DRIVING), notify, motors.left_power, motors.right_power {=
        if (!avoidReduceSpeed->value) {   
          lf_set_mode(DRIVING);
          lf_set(notify, "DRIVING");
          lf_set(motors.left_power, 0.1f);
          lf_set(motors.right_power, 0.1f);
        }
      =}

    }
  }
  
  main reactor {
    timer t(0, 2 sec)
    state drive: bool = false
    robot = new RobotWithAvoidance()
    IRSensor = new IRSensorReader()
    display = new Display()
    IRSensor.IR_1_out -> robot.IR_1_val
    IRSensor.IR_2_out -> robot.IR_2_val
    IRSensor.IR_3_out -> robot.IR_3_val
    IRSensor.IR_4_out -> robot.IR_4_val
    IRSensor.IR_5_out -> robot.IR_5_val
    IRSensor.IR_6_out -> robot.IR_6_val
    IRSensor.IR_7_out -> robot.IR_7_val
    robot.notify -> display.line0
  
    reaction(t) -> robot.drive {=
      lf_set(robot.drive, self->drive);
      // Toggle the drive state variable for next time.
      self->drive = !self->drive;
    =}
  }
  
  